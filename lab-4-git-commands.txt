Exercise 1: Initializing a Git Repository
1. Open a terminal and navigate to your desired project directory. 
draco

2. Use the `git init` command to create a new Git repository in that directory.
Initialized empty Git repository in /home/codespace/draco/.git/

3. Verify that the repository has been created successfully. Use the `git status` command to check the status of your repository.
On branch main

No commits yet

nothing to commit (create/copy files and use "git add" to track)

4. How do you know it has initialized sucessfully? 
ls -a or ls -l -a reveals the .git folder

Exercise 2: Tracking Changes
1. Create a new text file (e.g., "example.txt") in your repository. 
file-one.txt

2. Use `git status` to see the status of your repository. What does it show?
On branch main

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        file-one.txt

nothing added to commit but untracked files present (use "git add" to track)

3. Use `git add` to stage the "example.txt" file for a commit.
git add file-one.txt

4. Check the status again using `git status`. What's the difference now?
On branch main

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   file-one.txt

Exercise 3: Making a Commit
1. Use `git commit` to create a commit with the staged changes. Don't forget to provide a meaningful commit message.
git commit -m "This file is committed."

2. Use `git status` to check the status of your repository once more. What does it show now?
On branch main
nothing to commit, working tree clean

Exercise 4: Viewing Commit History
1. Use `git log` to view the commit history of your repository. This will display a list of commits, including the commit message, author, date, and a unique commit hash.
commit 2f5f4dad011ea74c59aa28e26730ecdfaedb4274 (HEAD -> main)
Author: Flo <95972881+FloWorkDesign@users.noreply.github.com>
Date:   Fri Nov 3 19:19:41 2023 +0000

    This file is committed.

2. Try adding the `--oneline` option to `git log` to display a more concise version of the commit history.
2f5f4da (HEAD -> main) This file is committed.

Exercise 5: Making More Changes
1. Make additional changes to the "example.txt" file.
echo "This file will include data." >> file-one.txt

2. Use `git status` to see the status of your repository. Are the changes detected?
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   file-one.txt

no changes added to commit (use "git add" and/or "git commit -a")

3. Use `git add` to stage the new changes.
git add file-one.txt

4. Create a new commit with the staged changes using `git commit`.
git commit -m "This is the second commit to the file."

Exercise 6: Reviewing Commit History
1. Use `git log` to view the updated commit history. You should now see the new commits you made.
Paste them here:
commit 4dce8b3675251658eec2a13c707a86d88d75af43 (HEAD -> main)
Author: Flo <95972881+FloWorkDesign@users.noreply.github.com>
Date:   Fri Nov 3 19:33:24 2023 +0000

    This is the second commit to the file.

commit 2f5f4dad011ea74c59aa28e26730ecdfaedb4274
Author: Flo <95972881+FloWorkDesign@users.noreply.github.com>
Date:   Fri Nov 3 19:19:41 2023 +0000

    This file is committed.
